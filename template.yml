AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: TrackerApp backend infrastructure.

Parameters:
  StageName:
    Type: String
    Default: v1
    Description: Enter the stage to use on API Gateway.
  FunctionAlias:
    Type: String
    Default: live
    Description: Enter the alias to use on Lambda functions.

Globals:
  Function:
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 15
    AutoPublishAlias: !Ref FunctionAlias
    Environment:
      Variables:
        JOURNEY_TABLE: !Ref TAppJourneyTable
        TOKEN_TABLE: !Ref TAppTokenTable
        CONNECTIONS_TABLE: !Ref TAppConnectionTable

Resources:
  TAppJourneyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TAppJourneyTable
      AttributeDefinitions:
        - AttributeName: JourneyId
          AttributeType: S
      KeySchema:
        - AttributeName: JourneyId
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true

  TAppTokenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TAppTokenTable
      AttributeDefinitions:
        - AttributeName: AppToken
          AttributeType: S
        - AttributeName: Type
          AttributeType: S
      KeySchema:
        - AttributeName: AppToken
          KeyType: HASH
        - AttributeName: Type
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false
      TimeToLiveSpecification:
        AttributeName: TTL
        Enabled: true

  TAppConnectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TAppConnectionTable
      AttributeDefinitions:
        - AttributeName: ConnectionId
          AttributeType: S
      KeySchema:
        - AttributeName: ConnectionId
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false

  TAppRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: TAppRestAPI
      EndpointConfiguration:
        Type: EDGE
      StageName: !Ref StageName
      OpenApiVersion: 3.0.1
      Auth:
        DefaultAuthorizer: TAppRestRequestAuthorizer
        Authorizers:
          TAppRestRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt TAppTokenAuthFunction.Arn
            ReauthorizeEvery: 600
            Identity:
              Headers:
                - Authorization

  TAppJourneyGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrackerApp-JourneyGet
      Handler: src/handlers/journey-get.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppJourneyTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppTokenTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TAppRestApi
            Method: GET
            Path: /journey/{id}

  TAppJourneyPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrackerApp-JourneyPost
      Handler: src/handlers/journey-post.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppJourneyTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppTokenTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TAppRestApi
            Method: POST
            Path: /journey
            Auth:
              Authorizer: "NONE"

  TAppJourneyDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrackerApp-JourneyDelete
      Handler: src/handlers/journey-delete.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppJourneyTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppTokenTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TAppRestApi
            Method: DELETE
            Path: /journey/{id}

  TAppLocationPutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrackerApp-LocationPut
      Handler: src/handlers/location-put.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppJourneyTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppTokenTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TAppRestApi
            Method: PUT
            Path: /journey/{id}/location

  TAppTokenAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrackerApp-TokenAuth
      Handler: src/handlers/token-auth.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppJourneyTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppTokenTable

  TAppJourneyGetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref TAppJourneyGetFunction]]
      RetentionInDays: 30

  TAppJourneyPostFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref TAppJourneyPostFunction]]
      RetentionInDays: 30

  TAppJourneyDeleteFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref TAppJourneyDeleteFunction]]
      RetentionInDays: 30

  TAppLocationPutFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref TAppLocationPutFunction]]
      RetentionInDays: 30

  TAppTokenAuthFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref TAppTokenAuthFunction]]
      RetentionInDays: 30

  TAppWsApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: TAppWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  TAppWsApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref TAppWsApi
      AutoDeploy: true
      StageName: !Ref StageName

  TAppWsConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TAppWsApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref TAppWsAuthorizer
      Target: !Join ["/", ["integrations", !Ref TAppWsConnectIntegration]]

  TAppWsDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref TAppWsApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join ["/", ["integrations", !Ref TAppWsDisconnectIntegration]]

  TAppWsConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TAppWsApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TAppOnConnectFunction.Alias}/invocations

  TAppWsDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref TAppWsApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TAppOnDisconnectFunction.Alias}/invocations

  TAppWsAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref TAppWsApi
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TAppTokenAuthFunction.Alias}/invocations
      IdentitySource:
        - route.request.querystring.token
      Name: TrackerApp-WsAuth

  TAppOnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrackerApp-OnConnect
      Handler: src/handlers/ws-connect.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppJourneyTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppConnectionTable

  TAppOnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: TrackerApp-OnDisconnect
      Handler: src/handlers/ws-disconnect.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppJourneyTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TAppConnectionTable

  TAppOnConnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref TAppOnConnectFunction]]
      RetentionInDays: 30

  TAppOnDisconnectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/", ["/aws/lambda", !Ref TAppOnDisconnectFunction]]
      RetentionInDays: 30

  TAppOnConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TAppOnConnectFunction.Alias
      Principal: apigateway.amazonaws.com

  TAppOnDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TAppOnDisconnectFunction.Alias
      Principal: apigateway.amazonaws.com

  TAppTokenAuthPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TAppTokenAuthFunction.Alias
      Principal: apigateway.amazonaws.com

Outputs:
  TAppRestUrl:
    Description: "URL used to invoke TrackerApp REST endpoints."
    Value: !Sub "https://${TAppRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"

  TAppWebSocketUrl:
    Description: "URL used to open WS connections to TrackerApp backend."
    Value: !Sub "wss://${TAppWsApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
